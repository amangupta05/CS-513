Here is the R code equivalent of the Python code you provided:
library(readr)
library(readr)
install.packages("readr")
library(readr)
library(caret)
library(e1071)
df <- read_csv("breast-cancer-wisconsin .csv", na = "?")
library(readr)
library(caret)
library(e1071)
df <- read_csv("breast-cancer-wisconsin .csv", na = "?")
df <- df %>%
rename(id = X1, clump_thickness = X2, cell_size_uniformity = X3, cell_shape_uniformity = X4,
marginal_adhesion = X5, single_epithelial_cell_size = X6, bare_nuclei = X7,
bland_chromatin = X8, normal_nucleoli = X9, mitoses = X10, diagnosis = X11)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(readr)
library(caret)
library(e1071)
library(dplyr)
df <- read_csv("breast-cancer-wisconsin .csv", na = "?")
df <- df %>%
rename(id = X1, clump_thickness = X2, cell_size_uniformity = X3, cell_shape_uniformity = X4,
marginal_adhesion = X5, single_epithelial_cell_size = X6, bare_nuclei = X7,
bland_chromatin = X8, normal_nucleoli = X9, mitoses = X10, diagnosis = X11)
rlang::last_error()
colnames(df) <- c("id", "clump_thickness", "cell_size_uniformity", "cell_shape_uniformity",
"marginal_adhesion", "single_epithelial_cell_size", "bare_nuclei",
"bland_chromatin", "normal_nucleoli", "mitoses", "diagnosis")
df$diagnosis <- ifelse(df$diagnosis == 2, "benign", "malignant")
df <- df %>%
drop_na()
library(tidyr)
df <- df %>%
drop_na()
df[,2:10] <- df[,2:10] %>%
as.factor()
df[,2:10] <- lapply(df[,2:10], as.factor)
set.seed(123)
trainIndex <- createDataPartition(df$diagnosis, p = 0.7, list = FALSE, times = 1)
train_df <- df[trainIndex,]
test_df <- df[-trainIndex,]
X_train <- train_df[,2:10]
y_train <- train_df[,11]
X_test <- test_df[,2:10]
y_test <- test_df[,11]
scaler <- preProcess(X_train, method = c("center", "scale"))
X_train <- predict(scaler, X_train)
X_test <- predict(scaler, X_test)
nb <- naiveBayes(x = X_train, y = y_train)
X_train <- scale(X_train)
nb <- naiveBayes(x = as.matrix(X_train), y = y_train)
X_train <- as.numeric(X_train)
X_train <- unlist(X_train)
X_train <- as.numeric(X_train)
X_train <- scale(X_train)
nb <- naiveBayes(x = as.matrix(X_train), y = y_train)
X_train <- unlist(X_train)
X_train <- as.numeric(X_train)
X_train <- scale(X_train)
nb <- naiveBayes(x = as.matrix(X_train), y = as.factor(y_train))
data <- na.omit(data)
X_train <- unlist(X_train)
X_train <- as.numeric(X_train)
X_train <- scale(X_train)
nb <- naiveBayes(x = as.matrix(X_train), y = as.factor(y_train))
install.packages("tidyverse")
library(tidyverse)
df <- read_csv("breast-cancer-wisconsin.csv", na = "?")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
df <- read_csv("breast-cancer-wisconsin.csv", na = "?")
df <- read_csv("breast-cancer-wisconsin .csv", na = "?")
colnames(df) <- c('id', 'clump_thickness', 'cell_size_uniformity', 'cell_shape_uniformity',
'marginal_adhesion', 'single_epithelial_cell_size', 'bare_nuclei',
'bland_chromatin', 'normal_nucleoli', 'mitoses', 'diagnosis')
df$diagnosis <- recode(df$diagnosis, `2` = "benign", `4` = "malignant")
df <- df %>% drop_na()
cols <- c('clump_thickness', 'cell_size_uniformity', 'cell_shape_uniformity',
'marginal_adhesion', 'single_epithelial_cell_size', 'bare_nuclei',
'bland_chromatin','normal_nucleoli','mitoses')
df[cols] <- lapply(df[cols], as.factor)
# install.packages("caret")
library(caret)
set.seed(42)
trainIndex <- createDataPartition(df$diagnosis, p = 0.7, list = FALSE)
train_df <- df[trainIndex,]
test_df  <- df[-trainIndex,]
X_train <- train_df %>% select(-diagnosis) %>% data.matrix()
y_train <- train_df$diagnosis
X_test  <- test_df %>% select(-diagnosis) %>% data.matrix()
y_test  <- test_df$diagnosis
preProcValues<- preProcess(X_train)
X_train<- predict(preProcValues,X_train)
X_test<- predict(preProcValues,X_test)
gnb_model<-naiveBayes(X_train,y_train)
y_pred<-predict(gnb_model,X_test)
install.packages("e1071")
library(e1071)
gnb_model<-naiveBayes(X_train,y_train)
y_pred<-predict(gnb_model,X_test)
confusionMatrix(y_pred,y_test)
y_pred<-predict(gnb_model,X_test)
y_pred <- factor(y_pred, levels = c("benign", "malignant"))
y_test <- factor(y_test, levels = c("benign", "malignant"))
confusionMatrix(y_pred,y_test)
confusionMatrix(y_pred,y_test)
library(class)
# Set seed for reproducibility
set.seed(123)
library(tidyverse)
df <- read_csv("breast-cancer-wisconsin .csv", na = "?")
colnames(df) <- c('id', 'clump_thickness', 'cell_size_uniformity', 'cell_shape_uniformity',
'marginal_adhesion', 'single_epithelial_cell_size', 'bare_nuclei',
'bland_chromatin', 'normal_nucleoli', 'mitoses', 'diagnosis')
df$diagnosis <- recode(df$diagnosis, `2` = "benign", `4` = "malignant")
df <- df %>% drop_na()
# Delete rows with missing values
data <- na.omit(data)
# Split data into training and test sets (70% training, 30% test)
train_index <- sample(1:nrow(data), 0.7*nrow(data))
train_data <- data[train_index,]
test_data <- data[-train_index,]
# Define predictor variables and outcome variable
predictors <- c("F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9")
outcome <- c("Diagnosis")
# Convert outcome variable to factor data type
train_data[,outcome] <- as.factor(train_data[,outcome])
test_data[,outcome] <- as.factor(test_data[,outcome])
# Apply knn methodology with k = 3
knn_pred_3 <- knn(train = train_data[,predictors], test = test_data[,predictors], cl = train_data[,outcome], k = 3)
# Calculate accuracy for k = 3
mean(knn_pred_3 == test_data[,outcome])
cols <- c('clump_thickness', 'cell_size_uniformity', 'cell_shape_uniformity',
'marginal_adhesion', 'single_epithelial_cell_size', 'bare_nuclei',
'bland_chromatin','normal_nucleoli','mitoses')
df[cols] <- lapply(df[cols], as.factor)
# install.packages("caret")
library(caret)
set.seed(42)
trainIndex <- createDataPartition(df$diagnosis, p = 0.7, list = FALSE)
train_df <- df[trainIndex,]
test_df  <- df[-trainIndex,]
X_train <- train_df %>% select(-diagnosis) %>% data.matrix()
y_train <- train_df$diagnosis
X_test  <- test_df %>% select(-diagnosis) %>% data.matrix()
y_test  <- test_df$diagnosis
preProcValues<- preProcess(X_train)
X_train<- predict(preProcValues,X_train)
X_test<- predict(preProcValues,X_test)
install.packages("e1071")
library(e1071)
# Apply knn methodology with k = 3
knn_pred_3 <- knn(train = train_data[,predictors], test = test_data[,predictors], cl = train_data[,outcome], k = 3)
# Apply knn methodology with k = 3
knn_pred_3 <- knn(X_train,y_train, k = 3)
# Apply knn methodology with k = 3
knn_pred_3 <- knn(train = X_train, test = X_test, cl = y_train, k = 3)
# Calculate accuracy for k = 3
mean(knn_pred_3 == test_data[,outcome])
# Calculate accuracy for k = 3
accuracy <- mean(knn_pred_3 == y_test)
print(accuracy)
# Apply knn methodology with k = 5
knn_pred_5 <- knn(train = X_train, test = X_test, cl = y_train, k = 5)
# Calculate accuracy for k = 5
accuracy <- mean(knn_pred_5 == y_test)
print(accuracy)
# Apply knn methodology with k = 10
knn_pred_10 <- knn(train = X_train, test = X_test, cl = y_train, k = 10)
# Calculate accuracy for k = 10
accuracy <- mean(knn_pred_10 == y_test)
print(accuracy)
# Calculate accuracy for k = 3
accuracy <- mean(knn_pred_3 == y_test)
print(accuracy)
cm <- confusionMatrix(knn_pred_3, y_test)
knn_pred_3 <- factor(knn_pred_3, levels = c("benign", "malignant"))
y_test <- factor(y_test, levels = c("benign", "malignant"))
# Calculate confusion matrix
cm <- confusionMatrix(knn_pred_3, y_test)
print(cm)
knn_pred_5 <- factor(knn_pred_5, levels = c("benign", "malignant"))
y_test <- factor(y_test, levels = c("benign", "malignant"))
# Calculate confusion matrix
cm <- confusionMatrix(knn_pred_5, y_test)
print(cm)
# Apply knn methodology with k = 10
knn_pred_10 <- knn(train = X_train, test = X_test, cl = y_train, k = 10)
# Calculate accuracy for k = 10
accuracy <- mean(knn_pred_10 == y_test)
print(accuracy)
knn_pred_10 <- factor(knn_pred_10, levels = c("benign", "malignant"))
y_test <- factor(y_test, levels = c("benign", "malignant"))
# Calculate confusion matrix
cm10 <- confusionMatrix(knn_pred_10, y_test)
print(cm10)
print(cm10,cm5,cm3)
# Calculate confusion matrix
cm5 <- confusionMatrix(knn_pred_5, y_test)
print(cm5)
print(cm10,cm5,cm3)
print(cm3)
library(class)
# Set seed for reproducibility
set.seed(123)
library(tidyverse)
df <- read_csv("breast-cancer-wisconsin .csv", na = "?")
colnames(df) <- c('id', 'clump_thickness', 'cell_size_uniformity', 'cell_shape_uniformity',
'marginal_adhesion', 'single_epithelial_cell_size', 'bare_nuclei',
'bland_chromatin', 'normal_nucleoli', 'mitoses', 'diagnosis')
df$diagnosis <- recode(df$diagnosis, `2` = "benign", `4` = "malignant")
df <- df %>% drop_na()
cols <- c('clump_thickness', 'cell_size_uniformity', 'cell_shape_uniformity',
'marginal_adhesion', 'single_epithelial_cell_size', 'bare_nuclei',
'bland_chromatin','normal_nucleoli','mitoses')
df[cols] <- lapply(df[cols], as.factor)
# install.packages("caret")
library(caret)
set.seed(42)
trainIndex <- createDataPartition(df$diagnosis, p = 0.7, list = FALSE)
train_df <- df[trainIndex,]
test_df  <- df[-trainIndex,]
X_train <- train_df %>% select(-diagnosis) %>% data.matrix()
y_train <- train_df$diagnosis
X_test  <- test_df %>% select(-diagnosis) %>% data.matrix()
y_test  <- test_df$diagnosis
preProcValues<- preProcess(X_train)
X_train<- predict(preProcValues,X_train)
X_test<- predict(preProcValues,X_test)
install.packages("e1071")
library(e1071)
install.packages("e1071")
# Apply knn methodology with k = 3
knn_pred_3 <- knn(train = X_train, test = X_test, cl = y_train, k = 3)
# Calculate accuracy for k = 3
accuracy <- mean(knn_pred_3 == y_test)
print(accuracy)
knn_pred_3 <- factor(knn_pred_3, levels = c("benign", "malignant"))
y_test <- factor(y_test, levels = c("benign", "malignant"))
# Calculate confusion matrix
cm3 <- confusionMatrix(knn_pred_3, y_test)
# Apply knn methodology with k = 5
knn_pred_5 <- knn(train = X_train, test = X_test, cl = y_train, k = 5)
# Calculate accuracy for k = 5
accuracy <- mean(knn_pred_5 == y_test)
print(accuracy)
knn_pred_5 <- factor(knn_pred_5, levels = c("benign", "malignant"))
y_test <- factor(y_test, levels = c("benign", "malignant"))
# Calculate confusion matrix
cm5 <- confusionMatrix(knn_pred_5, y_test)
print(cm5)
# Apply knn methodology with k = 10
knn_pred_10 <- knn(train = X_train, test = X_test, cl = y_train, k = 10)
# Calculate accuracy for k = 10
accuracy <- mean(knn_pred_10 == y_test)
print(accuracy)
knn_pred_10 <- factor(knn_pred_10, levels = c("benign", "malignant"))
y_test <- factor(y_test, levels = c("benign", "malignant"))
# Calculate confusion matrix
cm10 <- confusionMatrix(knn_pred_10, y_test)
print(cm10)
print(cm5)
print(cm3)
